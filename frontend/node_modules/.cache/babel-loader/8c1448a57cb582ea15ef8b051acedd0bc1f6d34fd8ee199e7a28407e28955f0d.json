{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\Blog\\\\client\\\\src\\\\components\\\\reactionBar.js\",\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addReaction } from \"../store/postsSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReactionBar = _ref => {\n  _s();\n  let {\n    post\n  } = _ref;\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.auth);\n  const reactions = [{\n    name: \"like\",\n    emoji: \"👍🏼\"\n  }, {\n    name: \"wow\",\n    emoji: \"😮\"\n  }, {\n    name: \"care\",\n    emoji: \"🥰\"\n  }, {\n    name: \"love\",\n    emoji: \"💖\"\n  }];\n  const react = async reactObj => {\n    if (!user) {\n      return;\n    }\n    const response = await fetch(\"/api/blogs/\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${user.token}`\n      },\n      body: JSON.stringify(reactObj)\n    });\n    const json = await response.json();\n    if (response.ok) {\n      return json;\n    } else {\n      console.log(json.error);\n    }\n  };\n  const reactionButtons = reactions.map(ele => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"react dark:text-gray-100 dark:active:bg-gray-500\",\n      onClick: () => {\n        const re = react({\n          postId: post._id,\n          reaction: ele.name\n        });\n        if (re) dispatch(addReaction({\n          postId: post._id,\n          reaction: ele.name\n        }));\n      },\n      children: [ele.emoji, post.reactions[ele.name]]\n    }, ele.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reactions\",\n    children: reactionButtons\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(ReactionBar, \"ERMOJPz2/CN1rNPFhRsLNXBEzzQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ReactionBar;\nexport default ReactionBar;\nvar _c;\n$RefreshReg$(_c, \"ReactionBar\");","map":{"version":3,"names":["useDispatch","useSelector","addReaction","ReactionBar","post","dispatch","user","state","auth","reactions","name","emoji","react","reactObj","response","fetch","method","headers","token","body","JSON","stringify","json","ok","console","log","error","reactionButtons","map","ele","re","postId","_id","reaction"],"sources":["D:/react/Blog/client/src/components/reactionBar.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\"\r\nimport { addReaction } from \"../store/postsSlice\"\r\n\r\nconst ReactionBar = ({ post }) => {\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(state => state.auth)\r\n\r\n    const reactions = [\r\n        { name: \"like\", emoji: \"👍🏼\" },\r\n        { name: \"wow\", emoji: \"😮\" },\r\n        { name: \"care\", emoji: \"🥰\" },\r\n        { name: \"love\", emoji: \"💖\" },\r\n    ]\r\n\r\n\r\n    const react = async (reactObj) => {\r\n        if (!user) {\r\n            return\r\n        }\r\n        const response = await fetch(\"/api/blogs/\", {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${user.token}`\r\n            },\r\n            body: JSON.stringify(reactObj)\r\n        })\r\n\r\n        const json = await response.json()\r\n        if (response.ok) {\r\n            return json\r\n        } else {\r\n            console.log(json.error);\r\n        }\r\n    }\r\n\r\n    const reactionButtons = reactions.map(ele => {\r\n        return <button\r\n            className=\"react dark:text-gray-100 dark:active:bg-gray-500\"\r\n            key={ele.name}\r\n            onClick={() => {\r\n                const re = react({ postId: post._id, reaction: ele.name })\r\n                if (re) dispatch(addReaction({ postId: post._id, reaction: ele.name }))\r\n            }\r\n            }\r\n        >\r\n            {ele.emoji}{post.reactions[ele.name]}\r\n        </button>\r\n    })\r\n    return (\r\n        <div className=\"reactions\">\r\n            {reactionButtons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReactionBar\r\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,qBAAqB;AAAA;AAEjD,MAAMC,WAAW,GAAG,QAAc;EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC;EACzB,MAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9B,MAAMM,IAAI,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;EAE7C,MAAMC,SAAS,GAAG,CACd;IAAEC,IAAI,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAO,CAAC,EAC/B;IAAED,IAAI,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAK,CAAC,EAC5B;IAAED,IAAI,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAK,CAAC,EAC7B;IAAED,IAAI,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAK,CAAC,CAChC;EAGD,MAAMC,KAAK,GAAG,MAAOC,QAAQ,IAAK;IAC9B,IAAI,CAACP,IAAI,EAAE;MACP;IACJ;IACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;MACxCC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASX,IAAI,CAACY,KAAM;MAC1C,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;IACjC,CAAC,CAAC;IAEF,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACQ,IAAI,EAAE;IAClC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACb,OAAOD,IAAI;IACf,CAAC,MAAM;MACHE,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,KAAK,CAAC;IAC3B;EACJ,CAAC;EAED,MAAMC,eAAe,GAAGlB,SAAS,CAACmB,GAAG,CAACC,GAAG,IAAI;IACzC,oBAAO;MACH,SAAS,EAAC,kDAAkD;MAE5D,OAAO,EAAE,MAAM;QACX,MAAMC,EAAE,GAAGlB,KAAK,CAAC;UAAEmB,MAAM,EAAE3B,IAAI,CAAC4B,GAAG;UAAEC,QAAQ,EAAEJ,GAAG,CAACnB;QAAK,CAAC,CAAC;QAC1D,IAAIoB,EAAE,EAAEzB,QAAQ,CAACH,WAAW,CAAC;UAAE6B,MAAM,EAAE3B,IAAI,CAAC4B,GAAG;UAAEC,QAAQ,EAAEJ,GAAG,CAACnB;QAAK,CAAC,CAAC,CAAC;MAC3E,CACC;MAAA,WAEAmB,GAAG,CAAClB,KAAK,EAAEP,IAAI,CAACK,SAAS,CAACoB,GAAG,CAACnB,IAAI,CAAC;IAAA,GAP/BmB,GAAG,CAACnB,IAAI;MAAA;MAAA;MAAA;IAAA,QAQR;EACb,CAAC,CAAC;EACF,oBACI;IAAK,SAAS,EAAC,WAAW;IAAA,UACrBiB;EAAe;IAAA;IAAA;IAAA;EAAA,QACd;AAEd,CAAC;AAAA,GAnDKxB,WAAW;EAAA,QACIH,WAAW,EACfC,WAAW;AAAA;AAAA,KAFtBE,WAAW;AAqDjB,eAAeA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}