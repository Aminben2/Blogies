{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getPosts = createAsyncThunk(\"posts/getPosts\", async () => {\n  const user = JSON.parse(localStorage.getItem(\"login\"));\n  try {\n    const response = await fetch(\"/api/blogs\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${user.token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Could not fetch the blogs\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    // console.error('Error:', error);\n    throw error; // Rethrow the error to propagate it to the component\n  }\n});\n\nexport const getOnePost = createAsyncThunk(\"post/getOnePost\", async id => {\n  const user = JSON.parse(localStorage.getItem(\"login\"));\n  try {\n    const response = await fetch(`/api/blogs/${id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${user.token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Could not fetch the blog\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n});\nexport const getUserPosts = createAsyncThunk(\"posts/getUserPosts\", async () => {\n  const user = JSON.parse(localStorage.getItem(\"login\"));\n  try {\n    const response = await fetch(`/api/profile/${user._id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${user.token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Could not fetch user blogs\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n});\nconst postSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    posts: [],\n    onePost: {},\n    userPosts: [],\n    isLoading: false,\n    isLoadingOnePost: false,\n    isLoadingUserPosts: false\n  },\n  reducers: {\n    addPost(state, action) {\n      state.posts.push(action.payload);\n    },\n    addReaction(state, action) {\n      let {\n        postId,\n        reaction\n      } = action.payload;\n      let existingPost = state.posts.find(post => post._id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    addComment(state, action) {\n      const {\n        commentContent,\n        userId\n      } = action.payload;\n      state.onePost.comments.push({\n        commentId: nanoid(),\n        userId: userId,\n        comment: commentContent,\n        createdAt: new Date().toISOString()\n      });\n    },\n    deleteUserPost(state, action) {\n      const {\n        postId\n      } = action.payload;\n      state.userPosts = state.userPosts.filter(post => post._id !== postId);\n    },\n    changePrivacy(state, action) {\n      //   const { private, postId } = action.payload;\n      const wantedPost = state.userPosts.find(post => post._id === action.payload.postId);\n      if (wantedPost) {\n        wantedPost.privacy = !wantedPost.private;\n      }\n    },\n    delComment(state, action) {\n      const {\n        commentId,\n        postId\n      } = action.payload;\n      const wantedPost = state.userPosts.find(post => post._id === postId);\n      if (wantedPost) {\n        wantedPost.comments = wantedPost.comments.filter(e => e.commentId !== commentId);\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getPosts.pending, state => {\n      state.isLoading = true;\n    }).addCase(getPosts.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.posts = action.payload;\n    }).addCase(getPosts.rejected, state => {\n      state.isLoading = false;\n    }).addCase(getOnePost.pending, state => {\n      state.isLoadingOnePost = true;\n    }).addCase(getOnePost.fulfilled, (state, action) => {\n      state.isLoadingOnePost = false;\n      state.onePost = action.payload;\n    }).addCase(getOnePost.rejected, state => {\n      state.isLoadingOnePost = false;\n    }).addCase(getUserPosts.pending, state => {\n      state.isLoadingUserPosts = true;\n    }).addCase(getUserPosts.fulfilled, (state, action) => {\n      state.isLoadingUserPosts = false;\n      state.userPosts = action.payload;\n    }).addCase(getUserPosts.rejected, state => {\n      state.isLoadingUserPosts = false;\n    });\n  }\n});\nexport const {\n  addPost,\n  addReaction,\n  addComment,\n  deleteUserPost,\n  changePrivacy,\n  delComment\n} = postSlice.actions;\nexport default postSlice;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","getPosts","user","JSON","parse","localStorage","getItem","response","fetch","headers","Authorization","token","ok","Error","data","json","error","getOnePost","id","getUserPosts","_id","postSlice","name","initialState","posts","onePost","userPosts","isLoading","isLoadingOnePost","isLoadingUserPosts","reducers","addPost","state","action","push","payload","addReaction","postId","reaction","existingPost","find","post","reactions","addComment","commentContent","userId","comments","commentId","comment","createdAt","Date","toISOString","deleteUserPost","filter","changePrivacy","wantedPost","privacy","private","delComment","e","extraReducers","builder","addCase","pending","fulfilled","rejected","actions"],"sources":["D:/react/Blog/client/src/store/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const getPosts = createAsyncThunk(\"posts/getPosts\", async () => {\r\n  const user = JSON.parse(localStorage.getItem(\"login\"));\r\n\r\n  try {\r\n    const response = await fetch(\"/api/blogs\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Could not fetch the blogs\");\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    // console.error('Error:', error);\r\n    throw error; // Rethrow the error to propagate it to the component\r\n  }\r\n});\r\n\r\nexport const getOnePost = createAsyncThunk(\"post/getOnePost\", async (id) => {\r\n  const user = JSON.parse(localStorage.getItem(\"login\"));\r\n\r\n  try {\r\n    const response = await fetch(`/api/blogs/${id}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Could not fetch the blog\");\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n});\r\n\r\nexport const getUserPosts = createAsyncThunk(\"posts/getUserPosts\", async () => {\r\n  const user = JSON.parse(localStorage.getItem(\"login\"));\r\n  try {\r\n    const response = await fetch(`/api/profile/${user._id}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Could not fetch user blogs\");\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n});\r\n\r\nconst postSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState: {\r\n    posts: [],\r\n    onePost: {},\r\n    userPosts: [],\r\n    isLoading: false,\r\n    isLoadingOnePost: false,\r\n    isLoadingUserPosts: false,\r\n  },\r\n  reducers: {\r\n    addPost(state, action) {\r\n      state.posts.push(action.payload);\r\n    },\r\n    addReaction(state, action) {\r\n      let { postId, reaction } = action.payload;\r\n      let existingPost = state.posts.find((post) => post._id === postId);\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++;\r\n      }\r\n    },\r\n    addComment(state, action) {\r\n      const { commentContent, userId } = action.payload;\r\n      state.onePost.comments.push({\r\n        commentId: nanoid(),\r\n        userId: userId,\r\n        comment: commentContent,\r\n        createdAt: new Date().toISOString(),\r\n      });\r\n    },\r\n    deleteUserPost(state, action) {\r\n      const { postId } = action.payload;\r\n\r\n      state.userPosts = state.userPosts.filter((post) => post._id !== postId);\r\n    },\r\n    changePrivacy(state, action) {\r\n      //   const { private, postId } = action.payload;\r\n      const wantedPost = state.userPosts.find(\r\n        (post) => post._id === action.payload.postId\r\n      );\r\n      if (wantedPost) {\r\n        wantedPost.privacy = !wantedPost.private;\r\n      }\r\n    },\r\n    delComment(state, action) {\r\n      const { commentId, postId } = action.payload;\r\n      const wantedPost = state.userPosts.find((post) => post._id === postId);\r\n      if (wantedPost) {\r\n        wantedPost.comments = wantedPost.comments.filter(\r\n          (e) => e.commentId !== commentId\r\n        );\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getPosts.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getPosts.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.posts = action.payload;\r\n      })\r\n      .addCase(getPosts.rejected, (state) => {\r\n        state.isLoading = false;\r\n      })\r\n      .addCase(getOnePost.pending, (state) => {\r\n        state.isLoadingOnePost = true;\r\n      })\r\n      .addCase(getOnePost.fulfilled, (state, action) => {\r\n        state.isLoadingOnePost = false;\r\n        state.onePost = action.payload;\r\n      })\r\n      .addCase(getOnePost.rejected, (state) => {\r\n        state.isLoadingOnePost = false;\r\n      })\r\n      .addCase(getUserPosts.pending, (state) => {\r\n        state.isLoadingUserPosts = true;\r\n      })\r\n      .addCase(getUserPosts.fulfilled, (state, action) => {\r\n        state.isLoadingUserPosts = false;\r\n        state.userPosts = action.payload;\r\n      })\r\n      .addCase(getUserPosts.rejected, (state) => {\r\n        state.isLoadingUserPosts = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  addPost,\r\n  addReaction,\r\n  addComment,\r\n  deleteUserPost,\r\n  changePrivacy,\r\n  delComment,\r\n} = postSlice.actions;\r\nexport default postSlice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}